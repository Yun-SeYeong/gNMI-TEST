// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi/gnmi.proto

package gnmi.proto;

/**
 * <pre>
 * Encoding defines the value encoding formats that are supported by the gNMI
 * protocol. These encodings are used by both the client (when sending Set
 * messages to modify the state of the target) and the target when serializing
 * data to be returned to the client (in both Subscribe and Get RPCs).
 * Reference: gNMI Specification Section 2.3
 * </pre>
 *
 * Protobuf enum {@code gnmi.Encoding}
 */
public enum Encoding
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * JSON encoded text.
   * </pre>
   *
   * <code>JSON = 0;</code>
   */
  JSON(0),
  /**
   * <pre>
   * Arbitrarily encoded bytes.
   * </pre>
   *
   * <code>BYTES = 1;</code>
   */
  BYTES(1),
  /**
   * <pre>
   * Encoded according to out-of-band agreed Protobuf.
   * </pre>
   *
   * <code>PROTO = 2;</code>
   */
  PROTO(2),
  /**
   * <pre>
   * ASCII text of an out-of-band agreed format.
   * </pre>
   *
   * <code>ASCII = 3;</code>
   */
  ASCII(3),
  /**
   * <pre>
   * JSON encoded text as per RFC7951.
   * </pre>
   *
   * <code>JSON_IETF = 4;</code>
   */
  JSON_IETF(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * JSON encoded text.
   * </pre>
   *
   * <code>JSON = 0;</code>
   */
  public static final int JSON_VALUE = 0;
  /**
   * <pre>
   * Arbitrarily encoded bytes.
   * </pre>
   *
   * <code>BYTES = 1;</code>
   */
  public static final int BYTES_VALUE = 1;
  /**
   * <pre>
   * Encoded according to out-of-band agreed Protobuf.
   * </pre>
   *
   * <code>PROTO = 2;</code>
   */
  public static final int PROTO_VALUE = 2;
  /**
   * <pre>
   * ASCII text of an out-of-band agreed format.
   * </pre>
   *
   * <code>ASCII = 3;</code>
   */
  public static final int ASCII_VALUE = 3;
  /**
   * <pre>
   * JSON encoded text as per RFC7951.
   * </pre>
   *
   * <code>JSON_IETF = 4;</code>
   */
  public static final int JSON_IETF_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Encoding valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Encoding forNumber(int value) {
    switch (value) {
      case 0: return JSON;
      case 1: return BYTES;
      case 2: return PROTO;
      case 3: return ASCII;
      case 4: return JSON_IETF;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Encoding>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Encoding> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Encoding>() {
          public Encoding findValueByNumber(int number) {
            return Encoding.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return gnmi.proto.GnmiProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Encoding[] VALUES = values();

  public static Encoding valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Encoding(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:gnmi.Encoding)
}

