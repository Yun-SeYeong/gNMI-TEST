// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi/gnmi.proto

package gnmi.proto;

/**
 * <pre>
 * SubscriptionMode is the mode of the subscription, specifying how the
 * target must return values in a subscription.
 * Reference: gNMI Specification Section 3.5.1.3
 * </pre>
 *
 * Protobuf enum {@code gnmi.SubscriptionMode}
 */
public enum SubscriptionMode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * The target selects the relevant mode for each element.
   * </pre>
   *
   * <code>TARGET_DEFINED = 0;</code>
   */
  TARGET_DEFINED(0),
  /**
   * <pre>
   * The target sends an update on element value change.
   * </pre>
   *
   * <code>ON_CHANGE = 1;</code>
   */
  ON_CHANGE(1),
  /**
   * <pre>
   * The target samples values according to the interval.
   * </pre>
   *
   * <code>SAMPLE = 2;</code>
   */
  SAMPLE(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * The target selects the relevant mode for each element.
   * </pre>
   *
   * <code>TARGET_DEFINED = 0;</code>
   */
  public static final int TARGET_DEFINED_VALUE = 0;
  /**
   * <pre>
   * The target sends an update on element value change.
   * </pre>
   *
   * <code>ON_CHANGE = 1;</code>
   */
  public static final int ON_CHANGE_VALUE = 1;
  /**
   * <pre>
   * The target samples values according to the interval.
   * </pre>
   *
   * <code>SAMPLE = 2;</code>
   */
  public static final int SAMPLE_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SubscriptionMode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SubscriptionMode forNumber(int value) {
    switch (value) {
      case 0: return TARGET_DEFINED;
      case 1: return ON_CHANGE;
      case 2: return SAMPLE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SubscriptionMode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SubscriptionMode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SubscriptionMode>() {
          public SubscriptionMode findValueByNumber(int number) {
            return SubscriptionMode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return gnmi.proto.GnmiProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final SubscriptionMode[] VALUES = values();

  public static SubscriptionMode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SubscriptionMode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:gnmi.SubscriptionMode)
}

